// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package dbstore

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
	unique_name, display_name, email
) VALUES (
	?, ?, ?
)
`

type CreateUserParams struct {
	UniqueName  string
	DisplayName string
	Email       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.UniqueName, arg.DisplayName, arg.Email)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE unique_name = ?
`

func (q *Queries) DeleteUser(ctx context.Context, uniqueName string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uniqueName)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
	id,
	unique_name,
	display_name,
	email
FROM users
WHERE unique_name = ?
`

func (q *Queries) GetUser(ctx context.Context, uniqueName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uniqueName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UniqueName,
		&i.DisplayName,
		&i.Email,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
	id,
	unique_name,
	display_name,
	email
FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UniqueName,
			&i.DisplayName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
	unique_name = COALESCE(?, unique_name),
	display_name = COALESCE(?, display_name),
	email = COALESCE(?, email)
WHERE id = ?
`

type UpdateUserParams struct {
	UniqueName  sql.NullString
	DisplayName sql.NullString
	Email       sql.NullString
	ID          uint64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UniqueName,
		arg.DisplayName,
		arg.Email,
		arg.ID,
	)
	return err
}
